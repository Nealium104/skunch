---
import Layout from "../layouts/Layout.astro";
import "@fontsource-variable/pixelify-sans"
import { Image } from "astro:assets";

const fetchData = async () => {
  try {
      const response = await fetch(`${process.env.BASE_URL}/contentful-fetch?content_type=concertDate`);
      const data = await response.json();
      return data;
  } catch (error) {
    console.error('Error fetching data:', error);
    return [];
  }
};

const contentfulData = await fetchData();

contentfulData.forEach((item, index) => {
  console.log(`${index}:`, item.fields.images)
})
---
<Layout>
    <div class="font-pixels mt-10 md:mt-0 max-w-screen-xl mx-auto">
        <div class="">
          <h1 class="font-pixels text-4xl font-bold">This is the skunchbucket</h1>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            {contentfulData.map((item, index) => (
                <article class="border-2 border-red p-4 gap-8 flex flex-col items-start justify-between">
                <div class="pb-4">
                    <h2 class="text-3xl">{item.fields.venue}</h2>
                    <p class="text-sm">{item.fields.date}</p>
                    <span>{item.fields.notes}</span>
                </div>
                <div id={`image-container-${index}`} class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {item.fields.images && Array.isArray(item.fields.images) && item.fields.images.length > 0 ? (
                    item.fields.images.slice(0, 2).map((image) => (
                  <Image 
                    src={`https:${image.fields.file.url}`}
                    alt={image.fields.title}
                    width={image.fields.file.details.image.width}
                    height={image.fields.file.details.image.height}
                  />
                ))
                ): (
                  <span>Sorry, no images!</span>
                )}
                <div id={`image-modal-content-${index}`} class="hidden">
                  {item.fields.images && Array.isArray(item.fields.images) ? (
                  item.fields.images.map((image) => (
                  <Image
                    src={`https:${image.fields.file.url}`}
                    alt={image.fields.title}
                    width={image.fields.file.details.image.width}
                    height={image.fields.file.details.image.height}
                  />
                ))
                ) : (
                  <span>Sorry, no images!</span>
                )
              }
              </div>
              </div>
                    <button class="more-button text-2xl border-2 px-2 border-black hover:bg-red hover:text-off-white hover:border-red transition duration-120">More</button>
            </article>
        ))}
          </div>
          <dialog id="imageModal" class="modal backdrop:bg-black/50 w-screen bg-off-white md:w-2/3 p-8 items-start gap-8 border-2 border-red">
            <div class="modal-content flex flex-col gap-8" id="modal-content"></div>
            <button class="border-2 my-4 px-2 border-black hover:bg-red text-2xl hover:text-off-white hover:border-red transition duration-120" id="close-modal">Close</button>
          </dialog>
        </div>
      </div>
</Layout>
<script>
  document.addEventListener('astro:page-load', () => {
  const buttons = document.querySelectorAll('.more-button');
  const closeModalButton = document.getElementById('close-modal');

    setListeners(buttons, closeModalButton);
  });

  const setListeners = (buttons, closeModalButton) => {
    closeModalButton.removeEventListener('click', closeModal);
    closeModalButton.addEventListener('click', closeModal);

    buttons.forEach((button, index) => {
      button.removeEventListener('click', toggleImages);
      button.addEventListener('click', () => toggleImages(index));  
    }) 
  }

  function toggleImages(index) {
  const allImagesContent = document.getElementById(`image-modal-content-${index}`).innerHTML;
  const modalContent = document.getElementById('modal-content');
  const imageModal = document.getElementById('imageModal') as HTMLDialogElement;

  modalContent.innerHTML = allImagesContent;
  imageModal.showModal();
  imageModal.scrollTop = 0;
}

  const closeModal = () => {
    const modalContent = document.getElementById('modal-content');
    const imageModal = document.getElementById('imageModal') as HTMLDialogElement;

    modalContent.innerHTML = '';
    imageModal.close();
  };

  window.addEventListener('click', (event) => {
    const modalContent = document.getElementById('modal-content');
    const imageModal = document.getElementById('imageModal') as HTMLDialogElement;

    if (event.target === imageModal) {
      modalContent.innerHTML = '';
      imageModal.close();
    }
  });
</script>